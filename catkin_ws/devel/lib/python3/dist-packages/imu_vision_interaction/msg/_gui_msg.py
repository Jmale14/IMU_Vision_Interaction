# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from imu_vision_interaction/gui_msg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class gui_msg(genpy.Message):
  _md5sum = "bf8981175370443a047e2d3397a3cff7"
  _type = "imu_vision_interaction/gui_msg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8[4] imu_stat
int8 kin_stat
int8[2] state_est_final
int8[2] state_est_im
int8[2] state_est_imu
float64[5] imu_pred
float64[2] im_pred"""
  __slots__ = ['imu_stat','kin_stat','state_est_final','state_est_im','state_est_imu','imu_pred','im_pred']
  _slot_types = ['int8[4]','int8','int8[2]','int8[2]','int8[2]','float64[5]','float64[2]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       imu_stat,kin_stat,state_est_final,state_est_im,state_est_imu,imu_pred,im_pred

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(gui_msg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.imu_stat is None:
        self.imu_stat = [0] * 4
      if self.kin_stat is None:
        self.kin_stat = 0
      if self.state_est_final is None:
        self.state_est_final = [0] * 2
      if self.state_est_im is None:
        self.state_est_im = [0] * 2
      if self.state_est_imu is None:
        self.state_est_imu = [0] * 2
      if self.imu_pred is None:
        self.imu_pred = [0.] * 5
      if self.im_pred is None:
        self.im_pred = [0.] * 2
    else:
      self.imu_stat = [0] * 4
      self.kin_stat = 0
      self.state_est_final = [0] * 2
      self.state_est_im = [0] * 2
      self.state_est_imu = [0] * 2
      self.imu_pred = [0.] * 5
      self.im_pred = [0.] * 2

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_4b().pack(*self.imu_stat))
      buff.write(_get_struct_b().pack(self.kin_stat))
      buff.write(_get_struct_2b().pack(*self.state_est_final))
      buff.write(_get_struct_2b().pack(*self.state_est_im))
      buff.write(_get_struct_2b().pack(*self.state_est_imu))
      buff.write(_get_struct_5d().pack(*self.imu_pred))
      buff.write(_get_struct_2d().pack(*self.im_pred))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      self.imu_stat = _get_struct_4b().unpack(str[start:end])
      start = end
      end += 1
      (self.kin_stat,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 2
      self.state_est_final = _get_struct_2b().unpack(str[start:end])
      start = end
      end += 2
      self.state_est_im = _get_struct_2b().unpack(str[start:end])
      start = end
      end += 2
      self.state_est_imu = _get_struct_2b().unpack(str[start:end])
      start = end
      end += 40
      self.imu_pred = _get_struct_5d().unpack(str[start:end])
      start = end
      end += 16
      self.im_pred = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.imu_stat.tostring())
      buff.write(_get_struct_b().pack(self.kin_stat))
      buff.write(self.state_est_final.tostring())
      buff.write(self.state_est_im.tostring())
      buff.write(self.state_est_imu.tostring())
      buff.write(self.imu_pred.tostring())
      buff.write(self.im_pred.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      self.imu_stat = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=4)
      start = end
      end += 1
      (self.kin_stat,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 2
      self.state_est_final = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=2)
      start = end
      end += 2
      self.state_est_im = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=2)
      start = end
      end += 2
      self.state_est_imu = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=2)
      start = end
      end += 40
      self.imu_pred = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=5)
      start = end
      end += 16
      self.im_pred = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5d = None
def _get_struct_5d():
    global _struct_5d
    if _struct_5d is None:
        _struct_5d = struct.Struct("<5d")
    return _struct_5d
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_2b = None
def _get_struct_2b():
    global _struct_2b
    if _struct_2b is None:
        _struct_2b = struct.Struct("<2b")
    return _struct_2b
_struct_4b = None
def _get_struct_4b():
    global _struct_4b
    if _struct_4b is None:
        _struct_4b = struct.Struct("<4b")
    return _struct_4b
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
