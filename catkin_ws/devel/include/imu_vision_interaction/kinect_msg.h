// Generated by gencpp from file imu_vision_interaction/kinect_msg.msg
// DO NOT EDIT!


#ifndef IMU_VISION_INTERACTION_MESSAGE_KINECT_MSG_H
#define IMU_VISION_INTERACTION_MESSAGE_KINECT_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace imu_vision_interaction
{
template <class ContainerAllocator>
struct kinect_msg_
{
  typedef kinect_msg_<ContainerAllocator> Type;

  kinect_msg_()
    : im_screw_probs_1()
    , im_screw_probs_2()
    , im_screw_probs_3()
    , im_screw_probs_4()
    , tally()
    , safe_move(false)  {
      im_screw_probs_1.assign(0.0);

      im_screw_probs_2.assign(0.0);

      im_screw_probs_3.assign(0.0);

      im_screw_probs_4.assign(0.0);

      tally.assign(0.0);
  }
  kinect_msg_(const ContainerAllocator& _alloc)
    : im_screw_probs_1()
    , im_screw_probs_2()
    , im_screw_probs_3()
    , im_screw_probs_4()
    , tally()
    , safe_move(false)  {
  (void)_alloc;
      im_screw_probs_1.assign(0.0);

      im_screw_probs_2.assign(0.0);

      im_screw_probs_3.assign(0.0);

      im_screw_probs_4.assign(0.0);

      tally.assign(0.0);
  }



   typedef boost::array<double, 5>  _im_screw_probs_1_type;
  _im_screw_probs_1_type im_screw_probs_1;

   typedef boost::array<double, 5>  _im_screw_probs_2_type;
  _im_screw_probs_2_type im_screw_probs_2;

   typedef boost::array<double, 5>  _im_screw_probs_3_type;
  _im_screw_probs_3_type im_screw_probs_3;

   typedef boost::array<double, 5>  _im_screw_probs_4_type;
  _im_screw_probs_4_type im_screw_probs_4;

   typedef boost::array<double, 5>  _tally_type;
  _tally_type tally;

   typedef uint8_t _safe_move_type;
  _safe_move_type safe_move;





  typedef boost::shared_ptr< ::imu_vision_interaction::kinect_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::imu_vision_interaction::kinect_msg_<ContainerAllocator> const> ConstPtr;

}; // struct kinect_msg_

typedef ::imu_vision_interaction::kinect_msg_<std::allocator<void> > kinect_msg;

typedef boost::shared_ptr< ::imu_vision_interaction::kinect_msg > kinect_msgPtr;
typedef boost::shared_ptr< ::imu_vision_interaction::kinect_msg const> kinect_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::imu_vision_interaction::kinect_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::imu_vision_interaction::kinect_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::imu_vision_interaction::kinect_msg_<ContainerAllocator1> & lhs, const ::imu_vision_interaction::kinect_msg_<ContainerAllocator2> & rhs)
{
  return lhs.im_screw_probs_1 == rhs.im_screw_probs_1 &&
    lhs.im_screw_probs_2 == rhs.im_screw_probs_2 &&
    lhs.im_screw_probs_3 == rhs.im_screw_probs_3 &&
    lhs.im_screw_probs_4 == rhs.im_screw_probs_4 &&
    lhs.tally == rhs.tally &&
    lhs.safe_move == rhs.safe_move;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::imu_vision_interaction::kinect_msg_<ContainerAllocator1> & lhs, const ::imu_vision_interaction::kinect_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace imu_vision_interaction

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::imu_vision_interaction::kinect_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imu_vision_interaction::kinect_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imu_vision_interaction::kinect_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imu_vision_interaction::kinect_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imu_vision_interaction::kinect_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imu_vision_interaction::kinect_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::imu_vision_interaction::kinect_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7d063af4b46c588d600951ce9d186617";
  }

  static const char* value(const ::imu_vision_interaction::kinect_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7d063af4b46c588dULL;
  static const uint64_t static_value2 = 0x600951ce9d186617ULL;
};

template<class ContainerAllocator>
struct DataType< ::imu_vision_interaction::kinect_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "imu_vision_interaction/kinect_msg";
  }

  static const char* value(const ::imu_vision_interaction::kinect_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::imu_vision_interaction::kinect_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[5] im_screw_probs_1\n"
"float64[5] im_screw_probs_2\n"
"float64[5] im_screw_probs_3\n"
"float64[5] im_screw_probs_4\n"
"float64[5] tally\n"
"bool safe_move\n"
;
  }

  static const char* value(const ::imu_vision_interaction::kinect_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::imu_vision_interaction::kinect_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.im_screw_probs_1);
      stream.next(m.im_screw_probs_2);
      stream.next(m.im_screw_probs_3);
      stream.next(m.im_screw_probs_4);
      stream.next(m.tally);
      stream.next(m.safe_move);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct kinect_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::imu_vision_interaction::kinect_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::imu_vision_interaction::kinect_msg_<ContainerAllocator>& v)
  {
    s << indent << "im_screw_probs_1[]" << std::endl;
    for (size_t i = 0; i < v.im_screw_probs_1.size(); ++i)
    {
      s << indent << "  im_screw_probs_1[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.im_screw_probs_1[i]);
    }
    s << indent << "im_screw_probs_2[]" << std::endl;
    for (size_t i = 0; i < v.im_screw_probs_2.size(); ++i)
    {
      s << indent << "  im_screw_probs_2[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.im_screw_probs_2[i]);
    }
    s << indent << "im_screw_probs_3[]" << std::endl;
    for (size_t i = 0; i < v.im_screw_probs_3.size(); ++i)
    {
      s << indent << "  im_screw_probs_3[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.im_screw_probs_3[i]);
    }
    s << indent << "im_screw_probs_4[]" << std::endl;
    for (size_t i = 0; i < v.im_screw_probs_4.size(); ++i)
    {
      s << indent << "  im_screw_probs_4[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.im_screw_probs_4[i]);
    }
    s << indent << "tally[]" << std::endl;
    for (size_t i = 0; i < v.tally.size(); ++i)
    {
      s << indent << "  tally[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tally[i]);
    }
    s << indent << "safe_move: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.safe_move);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMU_VISION_INTERACTION_MESSAGE_KINECT_MSG_H
