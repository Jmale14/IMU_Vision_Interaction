// Generated by gencpp from file imu_vision_interaction/gui_msg.msg
// DO NOT EDIT!


#ifndef IMU_VISION_INTERACTION_MESSAGE_GUI_MSG_H
#define IMU_VISION_INTERACTION_MESSAGE_GUI_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace imu_vision_interaction
{
template <class ContainerAllocator>
struct gui_msg_
{
  typedef gui_msg_<ContainerAllocator> Type;

  gui_msg_()
    : imu_stat()
    , kin_stat(0)
    , state_est_final()
    , state_est_im()
    , state_est_imu()
    , imu_pred()
    , im_pred()  {
      imu_stat.assign(0);

      state_est_final.assign(0);

      state_est_im.assign(0);

      state_est_imu.assign(0);

      imu_pred.assign(0.0);

      im_pred.assign(0.0);
  }
  gui_msg_(const ContainerAllocator& _alloc)
    : imu_stat()
    , kin_stat(0)
    , state_est_final()
    , state_est_im()
    , state_est_imu()
    , imu_pred()
    , im_pred()  {
  (void)_alloc;
      imu_stat.assign(0);

      state_est_final.assign(0);

      state_est_im.assign(0);

      state_est_imu.assign(0);

      imu_pred.assign(0.0);

      im_pred.assign(0.0);
  }



   typedef boost::array<int8_t, 4>  _imu_stat_type;
  _imu_stat_type imu_stat;

   typedef int8_t _kin_stat_type;
  _kin_stat_type kin_stat;

   typedef boost::array<int8_t, 2>  _state_est_final_type;
  _state_est_final_type state_est_final;

   typedef boost::array<int8_t, 2>  _state_est_im_type;
  _state_est_im_type state_est_im;

   typedef boost::array<int8_t, 2>  _state_est_imu_type;
  _state_est_imu_type state_est_imu;

   typedef boost::array<double, 5>  _imu_pred_type;
  _imu_pred_type imu_pred;

   typedef boost::array<double, 2>  _im_pred_type;
  _im_pred_type im_pred;





  typedef boost::shared_ptr< ::imu_vision_interaction::gui_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::imu_vision_interaction::gui_msg_<ContainerAllocator> const> ConstPtr;

}; // struct gui_msg_

typedef ::imu_vision_interaction::gui_msg_<std::allocator<void> > gui_msg;

typedef boost::shared_ptr< ::imu_vision_interaction::gui_msg > gui_msgPtr;
typedef boost::shared_ptr< ::imu_vision_interaction::gui_msg const> gui_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::imu_vision_interaction::gui_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::imu_vision_interaction::gui_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::imu_vision_interaction::gui_msg_<ContainerAllocator1> & lhs, const ::imu_vision_interaction::gui_msg_<ContainerAllocator2> & rhs)
{
  return lhs.imu_stat == rhs.imu_stat &&
    lhs.kin_stat == rhs.kin_stat &&
    lhs.state_est_final == rhs.state_est_final &&
    lhs.state_est_im == rhs.state_est_im &&
    lhs.state_est_imu == rhs.state_est_imu &&
    lhs.imu_pred == rhs.imu_pred &&
    lhs.im_pred == rhs.im_pred;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::imu_vision_interaction::gui_msg_<ContainerAllocator1> & lhs, const ::imu_vision_interaction::gui_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace imu_vision_interaction

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::imu_vision_interaction::gui_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imu_vision_interaction::gui_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imu_vision_interaction::gui_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imu_vision_interaction::gui_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imu_vision_interaction::gui_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imu_vision_interaction::gui_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::imu_vision_interaction::gui_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf8981175370443a047e2d3397a3cff7";
  }

  static const char* value(const ::imu_vision_interaction::gui_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf8981175370443aULL;
  static const uint64_t static_value2 = 0x047e2d3397a3cff7ULL;
};

template<class ContainerAllocator>
struct DataType< ::imu_vision_interaction::gui_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "imu_vision_interaction/gui_msg";
  }

  static const char* value(const ::imu_vision_interaction::gui_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::imu_vision_interaction::gui_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8[4] imu_stat\n"
"int8 kin_stat\n"
"int8[2] state_est_final\n"
"int8[2] state_est_im\n"
"int8[2] state_est_imu\n"
"float64[5] imu_pred\n"
"float64[2] im_pred\n"
;
  }

  static const char* value(const ::imu_vision_interaction::gui_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::imu_vision_interaction::gui_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.imu_stat);
      stream.next(m.kin_stat);
      stream.next(m.state_est_final);
      stream.next(m.state_est_im);
      stream.next(m.state_est_imu);
      stream.next(m.imu_pred);
      stream.next(m.im_pred);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gui_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::imu_vision_interaction::gui_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::imu_vision_interaction::gui_msg_<ContainerAllocator>& v)
  {
    s << indent << "imu_stat[]" << std::endl;
    for (size_t i = 0; i < v.imu_stat.size(); ++i)
    {
      s << indent << "  imu_stat[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.imu_stat[i]);
    }
    s << indent << "kin_stat: ";
    Printer<int8_t>::stream(s, indent + "  ", v.kin_stat);
    s << indent << "state_est_final[]" << std::endl;
    for (size_t i = 0; i < v.state_est_final.size(); ++i)
    {
      s << indent << "  state_est_final[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.state_est_final[i]);
    }
    s << indent << "state_est_im[]" << std::endl;
    for (size_t i = 0; i < v.state_est_im.size(); ++i)
    {
      s << indent << "  state_est_im[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.state_est_im[i]);
    }
    s << indent << "state_est_imu[]" << std::endl;
    for (size_t i = 0; i < v.state_est_imu.size(); ++i)
    {
      s << indent << "  state_est_imu[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.state_est_imu[i]);
    }
    s << indent << "imu_pred[]" << std::endl;
    for (size_t i = 0; i < v.imu_pred.size(); ++i)
    {
      s << indent << "  imu_pred[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.imu_pred[i]);
    }
    s << indent << "im_pred[]" << std::endl;
    for (size_t i = 0; i < v.im_pred.size(); ++i)
    {
      s << indent << "  im_pred[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.im_pred[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMU_VISION_INTERACTION_MESSAGE_GUI_MSG_H
